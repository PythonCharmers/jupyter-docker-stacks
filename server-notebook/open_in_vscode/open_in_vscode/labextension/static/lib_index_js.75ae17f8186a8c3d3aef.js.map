{"version":3,"file":"lib_index_js.75ae17f8186a8c3d3aef.js","mappings":"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","sources":["webpack://open_in_vscode/./src/handler.ts","webpack://open_in_vscode/./src/index.ts"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\n\nimport { ServerConnection } from '@jupyterlab/services';\n\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI<T>(\n  endPoint = '',\n  init: RequestInit = {}\n): Promise<T> {\n  // Make request to Jupyter API\n  const settings = ServerConnection.makeSettings();\n  const requestUrl = URLExt.join(\n    settings.baseUrl,\n    'open_in_vscode', // API Namespace\n    endPoint\n  );\n\n  let response: Response;\n  try {\n    response = await ServerConnection.makeRequest(requestUrl, init, settings);\n  } catch (error) {\n    console.log('ERORR', error);\n    //throw new ServerConnection.NetworkError(error);\n    // Check if the error is an instance of Error, which includes TypeError.\n   if (error instanceof Error) {\n     throw new ServerConnection.NetworkError(error);\n   } else {\n     // If it's not an Error instance, you might want to handle it differently\n     // or re-throw as a generic Error\n     throw new Error('An unknown error occurred.');\n   }\n  }\n\n  let data: any = await response.text();\n\n  if (data.length > 0) {\n    try {\n      data = JSON.parse(data);\n    } catch (error) {\n      console.log('Not a JSON response body.', response);\n    }\n  }\n\n  if (!response.ok) {\n    throw new ServerConnection.ResponseError(response, data.message || data);\n  }\n\n  return data;\n}\n","import { Widget } from '@lumino/widgets';\n\nimport { toArray } from '@lumino/algorithm';\n\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\n\nimport {\n  ABCWidgetFactory,\n  DocumentRegistry,\n  IDocumentWidget,\n  DocumentWidget\n} from '@jupyterlab/docregistry';\n\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\n\nimport { folderIcon } from '@jupyterlab/ui-components';\n\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport { requestAPI } from './handler';\n\n//const selectorItem = '.jp-DirListing-item[data-isdir]';\nconst selectorNotDir = '.jp-DirListing-item[data-isdir=\"false\"]';\n\nconst SETTINGS_ID = 'open_in_vscode:open_in_vscode';\n\nfunction getCurrentDomain(app: JupyterFrontEnd): string {\n    // Get the base URL of the JupyterLab server\n    const baseUrl = app.serviceManager.serverSettings.baseUrl;\n    // Construct the full URL\n    const fullUrl = new URL(baseUrl, document.location.href);\n    // Return the protocol and domain part\n    return `${fullUrl.protocol}//${fullUrl.hostname}`;\n}\n\n/**\n * The command IDs.\n */\nnamespace CommandIDs {\n  export const openFile = 'open_in_vscode:open_in_vscode';\n}\n\nexport interface IResponse {\n  /*\n   * Whether the request was a success or not.\n   */\n  success: boolean;\n}\n\n/**\n * A widget that does not will to live.\n */\nexport class DummyWidget extends Widget {\n  protected onAfterAttach(): void {\n    this.parent?.dispose();\n  }\n}\n\nexport class FileOpenFactory extends ABCWidgetFactory<\n  IDocumentWidget<DummyWidget>\n> {\n  /**\n   * Create a new widget factory.\n   */\n  constructor(\n    options: DocumentRegistry.IWidgetFactoryOptions<\n      IDocumentWidget<DummyWidget>\n    >,\n    app: JupyterFrontEnd\n  ) {\n    super(options);\n\n    this.app = app;\n  }\n\n  /**\n   * Create a new widget given a context.\n   */\n  protected createNewWidget(\n    context: DocumentRegistry.Context\n  ): DocumentWidget<DummyWidget> {\n    this.app.commands.execute(CommandIDs.openFile);\n\n    return new DocumentWidget<DummyWidget>({\n      context,\n      content: new DummyWidget()\n    });\n  }\n\n  private app: JupyterFrontEnd;\n}\n\nconst extension: JupyterFrontEndPlugin<void> = {\n  id: 'open_in_vscode:plugin',\n  requires: [IFileBrowserFactory, ISettingRegistry],\n  autoStart: true,\n  activate: (\n    app: JupyterFrontEnd,\n    factory: IFileBrowserFactory,\n    settings: ISettingRegistry\n  ) => {\n    Promise.all([app.restored, settings.load(SETTINGS_ID)]).then(\n      ([, setting]) => {\n        const widgetFactory = new FileOpenFactory(\n          {\n            name: 'FileOpen',\n            modelName: 'base64',\n            fileTypes: ['desktop'],\n            defaultFor: ['desktop'],\n            preferKernel: false,\n            canStartKernel: false\n          },\n          app\n        );\n\n        const extensions = setting.get('extensions').composite as string[];\n\n        app.docRegistry.addWidgetFactory(widgetFactory);\n\n        app.docRegistry.addFileType({ name: 'desktop', extensions });\n        app.docRegistry.setDefaultWidgetFactory('desktop', 'FileOpen');\n      }\n    );\n\n    app.commands.addCommand(CommandIDs.openFile, {\n      execute: () => {\n        const widget = factory.tracker.currentWidget;\n\n        if (widget) {\n          const selection = toArray(widget.selectedItems());\n\n          if (selection.length !== 1) {\n            return;\n          }\n\n          const selected = selection[0];\n\n          requestAPI<IResponse>('open-file', {\n            method: 'POST',\n            body: JSON.stringify({ path: selected.path })\n          })\n            .then(data => {\n              // the server part worked properly, it means VSCode should've already opened the file,\n              //  so lets just open a new tab where VSCode is\n              let currentDomain = getCurrentDomain(app);\n              let vscodeUrl = new URL(currentDomain);\n              vscodeUrl.port = '14853';  // TODO: move to settings         \n              window.open(vscodeUrl.toString(), '_blank');\n            })\n            .catch(reason => {\n              console.error(\n                `The open_in_vscode server extension appears to be missing.\\n${reason}`\n              );\n            });\n        }\n      },\n      icon: folderIcon,  // TODO: add \n      label: 'Open With VSCode'\n    });\n\n    app.contextMenu.addItem({\n      command: CommandIDs.openFile,\n      selector: selectorNotDir,\n      rank: 2\n    });\n  }\n};\n\nexport default extension;\n"],"names":[],"sourceRoot":""}